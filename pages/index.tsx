import type { NextPage } from "next";
import styles from "../styles/Home.module.css";
import Head from "next/head";
import Image from "next/image";
import { useForm, SubmitHandler } from "react-hook-form";

import { addMweet } from "../services/firebase.service";
import { useAuth } from "../context/AuthContext";
import { useRouter } from "next/router";
import { withProtected } from "../hook/auth";

import Routes from "../utils/Routes";

type FormValues = {
  mweet: string;
};

const Home: NextPage = () => {
  const {
    formState: { errors },
    handleSubmit,
    register,
  } = useForm<FormValues>();
  const { user, logout } = useAuth();
  const router = useRouter();

  // console.log("user", user);

  const signOut = async () => {
    try {
      await logout();
      router.push(Routes.LOGIN);
    } catch (e: any) {
      console.log("error", e);
    }
  };

  const sendMweet: SubmitHandler<FormValues> = async ({ mweet }) => {
    console.log("value", mweet);
    try {
      await addMweet({ content: mweet, uid: user.uid });
      console.log("mweet saved check firestore");
    } catch (e: any) {
      console.log("error", e);
    }
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <button onClick={signOut}>LogOut</button>
      <div>
        <form onSubmit={handleSubmit(sendMweet)}>
          <textarea
            {...register("mweet", { maxLength: 280 })}
            name="mweet"
            id="1"
            cols={70}
            rows={8}
            maxLength={281}
          ></textarea>
          {errors.mweet?.type === "maxLength" && (
            <p style={{ color: "white" }}>The max length is 280</p>
          )}
          <button type={"submit"}>Send</button>
        </form>
      </div>
    </div>
  );
};

export default withProtected(Home);
